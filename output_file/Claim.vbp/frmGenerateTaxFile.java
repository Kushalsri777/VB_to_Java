
import java.util.Date;

public class frmGenerateTaxFile {

  //!TODO! This isn't a maintenance screen, so make sure it is set up appropriately,
  //      e.g., Dirty, saving/restoring position.
  //!TODO! Be sure to test a date range that should get no data, to ensure formerly fatal error is handled correctly.

  //******************************************************************************
  // Module     : frmGenerateTaxFile
  // Description:
  // Procedures : cmdClose_Click()
  //              cmdOK_Click()
  //              fnFillRecord()
  //              fnGetTaxFileData(ByVal dteFromDt As date, Byval dteToDt as date) As ADODB.Recordset
  //              fnValidData() as Boolean
  //              fnWarningData()
  //              Form_Initialize()
  //              Form_Load()
  //              Form_QueryUnload(ByRef pintCancel As Integer, ByRef pintUnloadMode As Integer)
  //              Form_Unload(ByRef pintCancel As Integer)

  // Modified   :
  // 03/26/01 BAW Cleaned with Total Visual CodeTools 2000
  // 01/xx/02 BAW Optimized per Project Analyzer (Space/Mid, etc. => Space$/Mid$)
  // 03/14/03 BAW Revamped to get all info from sproc
  // 12/06/04 BAW (YE2004) Added totals to "tax files generated" message generated by cmdOK_Click, and
  //              corrected its logic to identify Puerto Rico data based on Field9, not Field11.
  // --------------------------------------------------
//Option Explicit
  *Option Compare Binary

  private String mstrScreenName = "";

  private boolean mbHasFinishedSuccessfully = false;
  private boolean mbIsInProgress = false;

  private static final Long MCLNGMINFORMWIDTH = 8160;
  private static final Long MCLNGMINFORMHEIGHT = 4830;

  private static final String MCSTRDTPFROMDATELABEL = "From Date";
  private static final String MCSTRDTPTODATELABEL = "To Date";
  private static final String MCSTRTXTTAXFILEFOLDERLABEL = "Save Files To";

  private Control mctlFirstEditableField;

  private String m_strTaxFile_PR = "";
  private String m_strTaxFile_NonPR = "";
  private Scripting.TextStream m_tsTaxFile_PR;
  private Scripting.TextStream m_tsTaxFile_NonPR;
  //-----------------------------------------------------------------------
  // The following Enum represents which type of tax file is currently
  // being worked with and is used by the fnTaxFile_XXX procedures.
  //-----------------------------------------------------------------------
//*TODO:** enum is translated as a new class at the end of the file Private Enum EnumTaxFile



  ///\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
  //\                                                                  /
  //|                Procedures and Event Handlers                     |
  ///                                                                  \
  //\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/



  //////////////////////////////////////////////////////////////////////////////////////////
  private void cmdBrowse_Click() {
    // Browse for Drive/Folder
    try {
      "cmdBrowse_Click"
.equals(Const cstrCurrentProc As String);
      New brfFolder = null; cbrfBrowseFolder
      String strFolderName = "";

      // Set screen name in case errors are reported here or
      // in procedures called by this Event Handler
      modGeneral.gerhApp.setScreenName(mstrScreenName);

      //' Owner of the BrowseFolder window
      brfFolder.hWnd = Me.cbrfBrowseFolder.setHWnd();
      //' Title
      brfFolder.Title = "Select a Folder to which the tax files will be saved";
      //' Initial folder
      brfFolder.Folder = txtTaxFileFolder.Text;
      //' Default flags
      brfFolder.Flags = BIF_RETURNONLYFSDIRS;
      //' Go get it
      strFolderName = brfFolder.ShowBrowse();
      if (!brfFolder.Cancelled) {
        txtTaxFileFolder.Text = modGeneral.fnAddBackslash(strFolderName).toUpperCase();
        Me.Refresh;
      }
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {

    // Clean-up statements go here
    modGeneral.fnFreeObject(brfFolder);

    // Report the error, since this is an event handler
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.reportFatalError(mstrScreenName);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  Else:
        // Save Err object data, if not already saved
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}


//////////////////////////////////////////////////////////////////////////////////////////////////
  private void cmdClose_Click() {
    // Comments  : Returns user to previous screen upon exiting
    // Parameters: None
    // Modified  :
    // --------------------------------------------------
    try {
      "cmdClose_Click"
.equals(Const cstrCurrentProc As String);

      // Set screen name in case errors are reported here or
      // in procedures called by this Event Handler
      modGeneral.gerhApp.setScreenName(mstrScreenName);

      Unload(this);
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {
    // Clean-up statements go here

    // Report the error, since this is an event handler
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.reportFatalError(mstrScreenName);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  Else:
        // Save Err object data, if not already saved
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}


//////////////////////////////////////////////////////////////////////////////////////////////////
  private void cmdOK_Click() {
    // Comments  : Creates the ASCII file that will be sent to
    //             the Tax system to do yearend tax
    //             reporting
    // Parameters: None
    // Modified  :
    // --------------------------------------------------
    try {
      "cmdOK_Click"
.equals(Const cstrCurrentProc As String);
      "PR"
.equals(Const cstrPuertoRico As String);
      "!"
.equals(Const cstrUnused As String);
      //' "General Number"
      "#,###,##0"
.equals(Const cstrGeneralNumber As String);
      "Currency"
.equals(Const cstrCurrency As String);
      double dblTotInt_PR = 0;
      double dblTotIntWthld_PR = 0;
      double dblTotInt_NonPR = 0;
      double dblTotIntWthld_NonPR = 0;
      DBField fld = null;
      chrgHourglass hrgHourglass = null;
      int intRecCtr_PR = 0;
      int intRecCtr_NonPR = 0;
      DBRecordSet rstTaxFileData = null;


      // Set screen name in case errors are reported here or
      // in procedures called by this Event Handler
      modGeneral.gerhApp.setScreenName(mstrScreenName);

      mbHasFinishedSuccessfully = false;
      mbIsInProgress = true;

      // Disables/Hides controls so user cannot do anything while batch is in progress
      fnSetAvailabilityOfControls();

      if (fnValidData()) {
        hrgHourglass = new chrgHourglass();
        hrgHourglass.setValue(true);

        // Save user's current setting to the registry as a Per User setting
        modGeneral.gapsApp.setTaxFileFolder(txtTaxFileFolder.Text);

        fnTaxFile_Open(etf_PuertoRico);
        fnTaxFile_Open(etf_NonPuertoRico);

        rstTaxFileData = fnGetTaxFileData(dtpFromDate.chrgHourglass.getValue(), dtpToDate.chrgHourglass.getValue());

        if (!(rstTaxFileData.BOF && rstTaxFileData.EOF)) {
          rstTaxFileData.MoveFirst;
          while (!rstTaxFileData.EOF) {
            //' YE2004
            if (!Fld09 != cstrPuertoRico) {
              for (int _i = 0; _i < rstTaxFileData.Fields.size(); _i++) {
                fld = rstTaxFileData.Fields.item(_i);
                if (fld.value != cstrUnused) {
                  m_tsTaxFile_NonPR.Write(fld.value);
                }
              }
              m_tsTaxFile_NonPR.WriteLine;
              intRecCtr_NonPR = intRecCtr_NonPR + 1;
              // Amounts have implied decimals, so divide by 100 to make them explicit
              //' YE2004
              dblTotInt_NonPR = dblTotInt_NonPR + (!Fld19.chrgHourglass.getValue() / 100);
              //' YE2004
              dblTotIntWthld_NonPR = dblTotIntWthld_NonPR + (!Fld22.chrgHourglass.getValue() / 100);
            } 
            else {
              for (int _i = 0; _i < rstTaxFileData.Fields.size(); _i++) {
                fld = rstTaxFileData.Fields.item(_i);
                if (fld.value != cstrUnused) {
                  m_tsTaxFile_PR.Write(fld.value);
                }
              }
              m_tsTaxFile_PR.WriteLine;
              intRecCtr_PR = intRecCtr_PR + 1;
              // Amounts have implied decimals, so divide by 100 to make them explicit
              //' YE2004
              dblTotInt_PR = dblTotInt_PR + (!Fld19.chrgHourglass.getValue() / 100);
              //' YE2004
              dblTotIntWthld_PR = dblTotIntWthld_PR + (!Fld22.chrgHourglass.getValue() / 100);

            }
            rstTaxFileData.MoveNext;
          //' while not rstTaxFileData.EOF
          }
          // Indicate success
          // gcRES_INFO_TAX_FILE_GEND (1004) = @@1 record(s) were written to the @@2 tax file. The total interest
          //        (Box 1) amount was @@3 and the total Interest Withheld (Box 4) amount was @@4.@@CRLF
          //        @@5 record(s) were written to the @@6 tax file. The total interest (Box 1) amount
          //        was @@7 and the total Interest Withheld (Box 4) amount was @@8.
          modGeneral.gerhApp.reportNonFatal(vbObjectError + modResConstants.gCRES_INFO_TAX_FILE_GEND, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc, ctclmClaim.getFormat(intRecCtr_PR, cstrGeneralNumber), txtFileNamePR.Text.toUpperCase(), ctclmClaim.getFormat(dblTotInt_PR, cstrCurrency), ctclmClaim.getFormat(dblTotIntWthld_PR, cstrCurrency), ctclmClaim.getFormat(intRecCtr_NonPR, cstrGeneralNumber), txtFileNameNonPR.Text.toUpperCase(), ctclmClaim.getFormat(dblTotInt_NonPR, cstrCurrency), ctclmClaim.getFormat(dblTotIntWthld_NonPR, cstrCurrency));
        } 
        else {
          // Tell the user no records met the selection criteria
          // gcRES_NERR_NO_RECS_WERE_FOUND (4004) = No records were found with @@1.
          modGeneral.gerhApp.saveAppSpecificErr(vbObjectError + modResConstants.gCRES_NERR_NO_RECS_WERE_FOUND, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc, "Payment Dates on or within the specified date");
          // **TODO:** goto found: GoTo PROC_EXIT;
        }
      }

      mbHasFinishedSuccessfully = true;
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {

    // Clean-up statements go here
    mbIsInProgress = false;
    // Disables/Hides controls so user cannot do anything while batch is in progress
    fnSetAvailabilityOfControls();

    if (!(hrgHourglass == null)) {
      modGeneral.fnFreeObject(hrgHourglass);
    }
    if (!(m_tsTaxFile_PR == null)) {
      m_tsTaxFile_PR.Close;
    }
    if (!(m_tsTaxFile_NonPR == null)) {
      m_tsTaxFile_NonPR.Close;
    }
    modGeneral.fnFreeRecordset(rstTaxFileData);
    modGeneral.fnFreeObject(m_tsTaxFile_PR);
    modGeneral.fnFreeObject(m_tsTaxFile_NonPR);

    // Report the error, since this is an event handler
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.reportFatalError(mstrScreenName);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      //' Path Not Found
      case  76:
        // 4003 = The drive or path specified does not exist. Please be sure to specify an existing drive and directory.
        modGeneral.gerhApp.reportNonFatal(vbObjectError + modResConstants.gCRES_NERR_DRIVE_OR_PATH_NOT_FOUND, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;

      default:
        // Save Err object data, if not already saved
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}





//////////////////////////////////////////////////////////////////////////////////////////////////
  private DBRecordSet fnGetTaxFileData(Date dteFromDt, Date dteToDt) {
    //--------------------------------------------------------------------------
    // Procedure:   fnGetTaxFileData
    // Description: This stored procedure builds a recordset of Payee & Claim
    //              information for use in preparing a tax file in the necessary
    //              I.R.S. TVTAXFORM layout for the PC.
    //
    //
    // Parameters:
    //     dteFromDt (in) - the earliest Payee Date of Payment to select
    //     dteToDt   (in) - the latest Payee Date of Payment to select
    //
    // Returns:     A disconnected ADODB.Recordset
    //-----------------------------------------------------------------------------
    "fnGetTaxFileData"
.equals(Const cstrCurrentProc As String);
    "dbo.proc_tax_file_layout_generate"
.equals(Const cstrSproc As String);
    DBRecordSet rstTemp = null;
    ADODB.Parameter prmReturnValue = null;
    ADODB.Parameter prmPayePmtDtFromDt = null;
    ADODB.Parameter prmPayePmtDtToDt = null;
    cadwADOWrapper adwTemp = null;

    try {

      adwTemp = new cadwADOWrapper();
      if (!(adwTemp.commandSetSproc(cstrSproc))) {
        // **TODO:** goto found: GoTo PROC_EXIT;
      }

      // For Char/VarChar fields,
      //     * Use fnNullIfZLS to ensure Nulls are appropriately handled.
      //     * Do *not* set the optional 2nd parameter to fnNullIfZLS to True.
      // For numeric fields,
      //     * Use fnNullIfZero to ensure Nulls are appropriately handled.
      // For Y/N fields,
      //     * Use fnBoolToYN to ensure True/False is appropriately translated.

      ADODB.Command w_aDOCommand = adwTemp.getADOCommand();
      // ---Parameter #1---
      // Define the return value that represents the error code (i.e. reason) why
      // the stored procedure failed.
      prmReturnValue = w_aDOCommand.CreateParameter(Name:="@return_value", Type:=adInteger, Direction:=adParamReturnValue, chrgHourglass.getValue():=Null);
      w_aDOCommand.Parameters.Append(prmReturnValue);

      // ---Parameter #2---
      // Define the PAYE_PMT_DT_FROM_DATE parameter
      prmPayePmtDtFromDt = w_aDOCommand.CreateParameter(Name:="paye_pmt_dt_from_date", Type:=adDBDate, Direction:=adParamInput, chrgHourglass.getValue():=dteFromDt);
      w_aDOCommand.Parameters.Append(prmPayePmtDtFromDt);

      // ---Parameter #3---
      // Define the PAYE_PMT_DT_TO_DATE parameter
      prmPayePmtDtToDt = w_aDOCommand.CreateParameter(Name:="paye_pmt_dt_to_date", Type:=adDBDate, Direction:=adParamInput, chrgHourglass.getValue():=dteToDt);
      w_aDOCommand.Parameters.Append(prmPayePmtDtToDt);

      rstTemp = w_aDOCommand.Execute();

      rstTemp.ActiveConnection = null;
      return rstTemp;
      // **TODO:** label found: PROC_EXIT:;
  //' Disable error handler
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {

    // Clean-up statements go here

    // Do *not* do "fnFreeRecordset rstTemp" since this will cause the recordset returned
    // by this function to be wiped out as well!
    modGeneral.fnFreeObject(prmReturnValue);
    modGeneral.fnFreeObject(prmPayePmtDtFromDt);
    modGeneral.fnFreeObject(prmPayePmtDtToDt);

    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.propagateError(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
    }
    return null;
    // **TODO:** label found: PROC_ERR:;
    switch (prmReturnValue) {
      //' 4027 -  The @@1 is invalid. @@2
      case  modResConstants.gCRES_NERR_REC_NOT_FOUND      :
        // Note that the following error is presented as an ATYPICAL 4027 error!
        modGeneral.gerhApp.saveAppSpecificErr(vbObjectError + modResConstants.gCRES_NERR_INVALID_DATA, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc, "From Date or To Date", "The tax data cannot be retrieved "+ "when any of these fields are NULL. FromDt=["+ FormatDateTime(dteFromDt, vbShortDate)+ "], ToDt=["+ FormatDateTime(dteToDt, vbShortDate)+ "]");
        /**TODO:** resume found: Resume(PROC_EXIT)*/;
      //' 4028
        break;

      case  modResConstants.gCRES_NERR_ERR_WHILE_TRYING_TO  :
        modGeneral.gerhApp.saveAppSpecificErr(vbObjectError + modResConstants.gCRES_NERR_ERR_WHILE_TRYING_TO, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc, "locate");
        /**TODO:** resume found: Resume(PROC_EXIT)*/;
        break;
    }

    // If any other errors exist, i.e. in Err object, then let it fall through into default error handling.

    switch (VBA.ex.Number) {
      //' Object not found
      case  -2147217900:
        modGeneral.gerhApp.saveAppSpecificErr(vbObjectError + modResConstants.gCRES_FERR_SPROC_NOT_FOUND, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc, cstrSproc);
        /**TODO:** resume found: Resume(PROC_EXIT)*/;
        break;

      default:
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}



//////////////////////////////////////////////////////////////////////////////////////////////////
  private void fnSetAvailabilityOfControls() {
    // Comments  :  Sets up file names and on-screen controls based on the select As Of Date.
    // Parameters:
    // Modified  :
    //
    // --------------------------------------------------
    try {
      "fnSetAvailabilityOfControls"
.equals(Const cstrCurrentProc As String);

      // If we're in the process of generating the tax files, then disable/hide the View buttons;
      // Otherwise, enable/show them

      if (mbHasFinishedSuccessfully && (Not mbIsInProgress)) {
        cmdViewNonPRTaxFile.Enabled = true;
        cmdViewPRTaxFile.Enabled = true;
      } 
      else {
        cmdViewNonPRTaxFile.Enabled = false;
        cmdViewPRTaxFile.Enabled = false;
      }
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {
    // Clean-up statements go here

    // Report the error, since this is an event handler
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.reportFatalError(mstrScreenName);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  Else:
        // Save Err object data, if not already saved
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}



//////////////////////////////////////////////////////////////////////////////////////////////////
  private void fnTaxFile_Open(EnumTaxFile intTaxFile) {
    // Comments  : Determines if all data is valid, including
    //             whether all required fields have been input.
    //             This function is called by cmdOK_Click.
    //             If a data error is found, it returns False
    //             which directs the caller to stop processing.
    //             It also generates warnings, by calling
    //             WarningData(), but only if no errors were
    //             found up to that point.
    // Parameters: Enum representing tax file to open
    // Returns   : N/A
    // Modified  :
    // --------------------------------------------------
    try {
      "fnTaxFile_Open"
.equals(Const cstrCurrentProc As String);
      Scripting.FileSystemObject fso = null;

      fso = new Scripting.FileSystemObject();

      switch (intTaxFile) {
        case  etf_NonPuertoRico:
          m_strTaxFile_NonPR = modGeneral.fnBuildQualifiedFileName(modGeneral.gapsApp.getTaxFileFolder(), txtFileNameNonPR.Text);
          m_tsTaxFile_NonPR = fso.CreateTextFile(m_strTaxFile_NonPR, true);
          break;

        case  etf_PuertoRico:
          m_strTaxFile_PR = modGeneral.fnBuildQualifiedFileName(modGeneral.gapsApp.getTaxFileFolder(), txtFileNamePR.Text);
          m_tsTaxFile_PR = fso.CreateTextFile(m_strTaxFile_PR, true);
          break;

        default:
          modGeneral.gerhApp.saveAppSpecificErr(vbObjectError + modResConstants.gCRES_NERR_UNEXPECTED_VAL_SELECT_CASE, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
          // **TODO:** goto found: GoTo PROC_EXIT;
          break;
      }
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {

    // Clean-up statements go here
    modGeneral.fnFreeObject(fso);

    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.propagateError(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  Else:
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}


//////////////////////////////////////////////////////////////////////////////////////////////////
  private boolean fnValidData() {
    boolean _rtn = false;
    // Comments  : Determines if all data is valid, including
    //             whether all required fields have been input.
    //             This function is called by cmdOK_Click.
    //             If a data error is found, it returns False
    //             which directs the caller to stop processing.
    //             It also generates warnings, by calling
    //             WarningData(), but only if no errors were
    //             found up to that point.
    // Parameters: N/A
    // Returns   : True if all data is valid; False otherwise
    // Modified  :
    // --------------------------------------------------
    try {
      "fnValidData"
.equals(Const cstrCurrentProc As String);
      boolean bErrorFound = false;
      Control ctlFirstToFail = null;
      New fso = null; Scripting.FileSystemObject
      int intFailures = 0;
      String strFieldList = "";
      String strMsgText = "";

      _rtn = true;

      // Check the fields in a left-to-right, top-to-bottom screen sequence.
      //     1. From Date
      //     2. To Date
      //     3. Save files to (folder)

      // ------------- First, verify required fields are missing --------------

      // --No required fields at this time--
      //If IsNull(txtFileNameNonPR) Or txtFileNameNonPR = vbNullString Then
      //    If intFailures = 0 Then
      //        strFieldList = vbCrLf & cstrTxtFileNameLabel
      //        Set ctlFirstToFail = txtFileNameNonPR
      //    Else
      //        strFieldList = strFieldList & vbCrLf & cstrTxtFileNameLabel
      //    End If
      //    intFailures = intFailures + 1
      //End If

      if (intFailures != 0) {
        bErrorFound = true;
        _rtn = false;
        if (ctlFirstToFail.Visible) {
          ctlFirstToFail.SetFocus;
        }
        // 4041 = The following required fields must be supplied before your request can be processed:@@CRLF@@1
        modGeneral.gerhApp.saveAppSpecificErr(vbObjectError + modResConstants.gCRES_NERR_REQD_FIELDS_MISSING, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc, strFieldList);
        // **TODO:** goto found: GoTo PROC_EXIT;
      }



      // ------------------- Now, do cross-field validations --------------------


      //' Reset for this section of error validations
      intFailures = 0;

      if (DateValue(dtpToDate.chrgHourglass.getValue()) < DateValue(dtpFromDate.chrgHourglass.getValue())) {
        intFailures = intFailures + 1;
        ctlFirstToFail = dtpToDate;
        strMsgText = strMsgText+ "\\r\\n"+ "The "+ MCSTRDTPTODATELABEL+ " ("+ ((Boolean) dtpToDate.chrgHourglass.getValue()).toString()+ ") must be on or after the "+ MCSTRDTPFROMDATELABEL+ " ("+ ((Boolean) dtpFromDate.chrgHourglass.getValue()).toString()+ ").";
      }

      // At app startup, capsAppSettings ensured that a Per User (HKCU) registry entry was built
      // to define where to place downloaded files and it also tried to create that folder if
      // it didn't already exist since we can't create files there until it exists!. Now,
      // let's verify that folder actually exists. If it doesn't, then do an error here.
      // (It's more logical to the user to generate the error when we actually **need** the
      // folder, than at app startup.
      if (!fso.FolderExists(txtTaxFileFolder.Text)) {
        intFailures = intFailures + 1;
        ctlFirstToFail = mctlFirstEditableField;
        strMsgText = strMsgText+ "\\r\\n"+ "The "+ MCSTRTXTTAXFILEFOLDERLABEL+ " folder ("+ txtTaxFileFolder.Text+ ") does not exist. "+ "That folder must be created or a different one selected "+ "before the tax files can be generated.";
      }

      if (intFailures != 0) {
        bErrorFound = true;
        _rtn = false;
        if (ctlFirstToFail.Visible) {
          ctlFirstToFail.SetFocus;
        }
        // 4034 = Cross-field validation errors were found. These must be corrected before @@1:@@2
        modGeneral.gerhApp.saveAppSpecificErr(vbObjectError + modResConstants.gCRES_NERR_CROSS_FLD_VALIDATIONS_FAILED, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc, "your request can be processed", strMsgText);
      }

      // If no errors found, continue with checking for warnings
      if (!bErrorFound) {
        fnWarningData();
      }
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {

    // Clean-up statements go here
    modGeneral.fnFreeObject(ctlFirstToFail);

    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.propagateError(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
    }
    return _rtn;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  Else:
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }

  return _rtn;
}


//////////////////////////////////////////////////////////////////////////////////////////////////
  private void fnWarningData() {
    // Comments  : Validates fields, generating warnings if appropriate.
    //             It should NOT cause ValidData (this procedure's caller)
    //             to return False, since we want updates to proceed.
    // Parameters: N/A
    // Returns   : N/A
    // Modified  :
    // --------------------------------------------------
    try {
      "fnWarningData"
.equals(Const cstrCurrentProc As String);

      // Add logic to display warning messages, if any
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {
    // Clean-up statements go here
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.propagateError(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  Else:
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}


//////////////////////////////////////////////////////////////////////////////////////////////////
  private void cmdViewNonPRTaxFile_Click() {
    // Comments  :
    // Parameters:
    // Modified  :
    //
    // --------------------------------------------------
    try {
      "cmdViewNonPRTaxFile_Click"
.equals(Const cstrCurrentProc As String);
      int lngReturnCode = 0;
      String strFileNm = "";

      // Set screen name in case errors are reported here or
      // in procedures called by this Event Handler
      modGeneral.gerhApp.setScreenName(mstrScreenName);

      strFileNm = modGeneral.fnBuildQualifiedFileName(modGeneral.gapsApp.getTaxFileFolder(), txtFileNameNonPR.Text);
      lngReturnCode = Shell("notepad.exe "+ strFileNm, vbNormalFocus);
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {
    // Clean-up statements go here

    // Report the error, since this is an event handler
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.reportFatalError(mstrScreenName);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  -2147022987:
        // gcRES_WARN_POSSIBLE_FILESYS_PERM_PROBLEM (2010)
        // An error was encountered while trying to @@1. This may be due to
        // network unavailability or insufficient authorizations. @@2
        modGeneral.gerhApp.saveAppSpecificErr(vbObjectError + modResConstants.gCRES_WARN_POSSIBLE_FILESYS_PERM_PROBLEM, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc, "view the Non-Puerto Rico tax file", "\\n"+ VBA.ex.Description);
        /**TODO:** resume found: Resume(PROC_EXIT)*/;
        break;

      default:
        // Save Err object data, if not already saved
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}


//////////////////////////////////////////////////////////////////////////////////////////////////
  private void cmdViewPRTaxFile_Click() {
    // Comments  :
    // Parameters:
    // Modified  :
    //
    // --------------------------------------------------
    try {
      "cmdViewPRTaxFile_Click"
.equals(Const cstrCurrentProc As String);
      int lngReturnCode = 0;
      String strFileNm = "";

      // Set screen name in case errors are reported here or
      // in procedures called by this Event Handler
      modGeneral.gerhApp.setScreenName(mstrScreenName);

      strFileNm = modGeneral.fnBuildQualifiedFileName(modGeneral.gapsApp.getTaxFileFolder(), txtFileNamePR.Text);
      lngReturnCode = Shell("notepad.exe "+ strFileNm, vbNormalFocus);
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {
    // Clean-up statements go here

    // Report the error, since this is an event handler
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.reportFatalError(mstrScreenName);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  -2147022987:
        // gcRES_WARN_POSSIBLE_FILESYS_PERM_PROBLEM (2010)
        // An error was encountered while trying to @@1. This may be due to
        // network unavailability or insufficient authorizations. @@2
        modGeneral.gerhApp.saveAppSpecificErr(vbObjectError + modResConstants.gCRES_WARN_POSSIBLE_FILESYS_PERM_PROBLEM, mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc, "view the Puerto Rico tax file", "\\n"+ VBA.ex.Description);
        /**TODO:** resume found: Resume(PROC_EXIT)*/;
        break;

      default:
        // Save Err object data, if not already saved
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}




//////////////////////////////////////////////////////////////////////////////////////////////////
  private void form_Load() {
    // Comments  : Adds password to Connect string and initializes
    //             bound controls
    // Parameters: None
    // Modified  :
    // --------------------------------------------------
    try {
      "Form_Load"
.equals(Const cstrCurrentProc As String);

      // Set the screen name that will be used to form the Title on message boxes
      mstrScreenName = Me.Caption;

      // Set screen name in case errors are reported here or
      // in procedures called by this Event Handler
      modGeneral.gerhApp.setScreenName(mstrScreenName);

      // Identify the icons that will be used for the form and the picture next to the Lookup ComboBox
      Me.Icon = LoadResPicture(modResConstants.gCRES_ICON_MAINAPP, vbResIcon);

      // If the user has ever opened this form before, restore its size & placement.
      // If the restore would result in the form being off-screen, just center it instead.
      if (modGeneral.gapsApp.restoreForm(this) == false) {
        //*TODO:** can't found type for with block
        //*With this
        __TYPE_NOT_FOUND w___TYPE_NOT_FOUND = this;
        w___TYPE_NOT_FOUND.Width = MCLNGMINFORMWIDTH;
        w___TYPE_NOT_FOUND.Height = MCLNGMINFORMHEIGHT;
        modGeneral.fnCenterFormOnMDI(frmMDIMain, this);
      }

      // Set defaults for controls, including:
      //   * From Date = Jan 1st of previous year
      //   * To Date = Dec 31st of previous year
      dtpFromDate.chrgHourglass.setValue(DateSerial(Year(Date) - 1, 1, 1));
      dtpToDate.chrgHourglass.setValue(DateSerial(Year(Date) - 1, 12, 31));
      txtFileNamePR.Text = "taxfile_pr.txt";
      txtFileNameNonPR.Text = "taxfile.txt";
      txtTaxFileFolder.Text = modGeneral.gapsApp.getTaxFileFolder();

      // Disables/Hides controls so user cannot do anything while batch is in progress
      fnSetAvailabilityOfControls();

      // Set the control to receive the focus after errors (the first editable field
      // on the screen)
      mctlFirstEditableField = dtpFromDate;
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {
    // Clean-up statements go here

    // Report the error, since this is an event handler
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.reportFatalError(mstrScreenName);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  Else:
        // Save Err object data, if not already saved
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}


//////////////////////////////////////////////////////////////////////////////////////////////////
  private void form_QueryUnload(int pintCancel, int pintUnloadMode) { // TODO: Use of ByRef founded Private Sub Form_QueryUnload(ByRef pintCancel As Integer, ByRef pintUnloadMode As Integer)
    // Comments  : If the user clicks the Close button ("X" in the upper
    //             right corner of the form), close the form.
    // Parameters: None
    // Modified  :
    // --------------------------------------------------
    try {
      "Form_QueryUnload"
.equals(Const cstrCurrentProc As String);

      // Set screen name in case errors are reported here or
      // in procedures called by this Event Handler
      modGeneral.gerhApp.setScreenName(mstrScreenName);

      if (pintUnloadMode == vbFormControlMenu) {
        pintCancel = true;
        Unload(this);
      }
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {
    // Clean-up statements go here

    // Report the error, since this is an event handler
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.reportFatalError(mstrScreenName);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  Else:
        // Save Err object data, if not already saved
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}


//////////////////////////////////////////////////////////////////////////////////////////////////
  private void form_Unload(int pintCancel) { // TODO: Use of ByRef founded Private Sub Form_Unload(ByRef pintCancel As Integer)
    // Comments  : Close the form
    // Parameters: pintCancel (in/out), if set to True
    //             the unload is aborted
    // Modified  :
    // --------------------------------------------------
    try {
      "Form_Unload"
.equals(Const cstrCurrentProc As String);

      // Set screen name in case errors are reported here or
      // in procedures called by this Event Handler
      modGeneral.gerhApp.setScreenName(mstrScreenName);

      modGeneral.gapsApp.saveForm(this);

      Unload(this);

      // Following needed to ensure this form will be deleted from the Forms collection
      // This may not work as intended. (Might set the wrong form reference, or
      // might not actually "take" (i.e. releasing all memory) if there are
      // other variables that reference it.
      modGeneral.fnFreeObject(frmGenerateTaxFile);
      // **TODO:** label found: PROC_EXIT:;
      // Disable the error handler so errors hit here won't be handled by PROC_ERR
  }
  //*TODO:** the error label PROC_ERR: couldn't be found
    try {
    // Clean-up statements go here

    // Report the error, since this is an event handler
    if (modGeneral.gerhApp.getErrNum() != modResConstants.gCLNGERR_NUM_DEFAULT) {
      modGeneral.gerhApp.reportFatalError(mstrScreenName);
    }
    return;
    // **TODO:** label found: PROC_ERR:;
    switch (VBA.ex.Number) {
        //Case statements for expected errors go here
      case  Else:
        // Save Err object data, if not already saved
        modGeneral.gerhApp.saveErrObjectData(mstrScreenName+ modResConstants.gCSTRDOT+ cstrCurrentProc);
        break;
    }
    /**TODO:** resume found: Resume(PROC_EXIT)*/;
//*TODO:** the error label 0: couldn't be found
  }
}


}

private class EnumTaxFile {
    public static final int ETF_PUERTORICO = 0;
    public static final int ETF_NONPUERTORICO = 1;
}




// Controller 

package controllers.logged.modules.general

import controllers._
import play.api.mvc._
import play.api.data._
import play.api.data.Forms._
import actions._
import play.api.Logger
import play.api.libs.json._
import models.cairo.modules.general._
import models.cairo.system.security.CairoSecurity
import models.cairo.system.database.DBHelper


case class RmgeneratetaxfileData(
              id: Option[Int],

              )

object Rmgeneratetaxfiles extends Controller with ProvidesUser {

  val rmgeneratetaxfileForm = Form(
    mapping(
      "id" -> optional(number),

  )(RmgeneratetaxfileData.apply)(RmgeneratetaxfileData.unapply))

  implicit val rmgeneratetaxfileWrites = new Writes[Rmgeneratetaxfile] {
    def writes(rmgeneratetaxfile: Rmgeneratetaxfile) = Json.obj(
      "id" -> Json.toJson(rmgeneratetaxfile.id),
      C.ID -> Json.toJson(rmgeneratetaxfile.id),

    )
  }

  def get(id: Int) = GetAction { implicit request =>
    LoggedIntoCompanyResponse.getAction(request, CairoSecurity.hasPermissionTo(S.LIST_RMGENERATETAXFILE), { user =>
      Ok(Json.toJson(Rmgeneratetaxfile.get(user, id)))
    })
  }

  def update(id: Int) = PostAction { implicit request =>
    Logger.debug("in rmgeneratetaxfiles.update")
    rmgeneratetaxfileForm.bindFromRequest.fold(
      formWithErrors => {
        Logger.debug(s"invalid form: ${formWithErrors.toString}")
        BadRequest
      },
      rmgeneratetaxfile => {
        Logger.debug(s"form: ${rmgeneratetaxfile.toString}")
        LoggedIntoCompanyResponse.getAction(request, CairoSecurity.hasPermissionTo(S.EDIT_RMGENERATETAXFILE), { user =>
          Ok(
            Json.toJson(
              Rmgeneratetaxfile.update(user,
                Rmgeneratetaxfile(
                       id,

                ))))
        })
      }
    )
  }

  def create = PostAction { implicit request =>
    Logger.debug("in rmgeneratetaxfiles.create")
    rmgeneratetaxfileForm.bindFromRequest.fold(
      formWithErrors => {
        Logger.debug(s"invalid form: ${formWithErrors.toString}")
        BadRequest
      },
      rmgeneratetaxfile => {
        Logger.debug(s"form: ${rmgeneratetaxfile.toString}")
        LoggedIntoCompanyResponse.getAction(request, CairoSecurity.hasPermissionTo(S.NEW_RMGENERATETAXFILE), { user =>
          Ok(
            Json.toJson(
              Rmgeneratetaxfile.create(user,
                Rmgeneratetaxfile(

                ))))
        })
      }
    )
  }

  def delete(id: Int) = PostAction { implicit request =>
    Logger.debug("in rmgeneratetaxfiles.delete")
    LoggedIntoCompanyResponse.getAction(request, CairoSecurity.hasPermissionTo(S.DELETE_RMGENERATETAXFILE), { user =>
      Rmgeneratetaxfile.delete(user, id)
      // Backbonejs requires at least an empty json object in the response
      // if not it will call errorHandler even when we responded with 200 OK :P
      Ok(JsonUtil.emptyJson)
    })
  }

}

// Model

package models.cairo.modules.general

import java.sql.{Connection, CallableStatement, ResultSet, Types, SQLException}
import anorm.SqlParser._
import anorm._
import services.DateUtil
import services.db.DB
import models.cairo.system.database.{DBHelper, Register, Field, FieldType, SaveResult}
import play.api.Play.current
import models.domain.CompanyUser
import java.util.Date
import play.api.Logger
import play.api.libs.json._
import scala.util.control.NonFatal

case class Rmgeneratetaxfile(
              id: Int,
,
              createdAt: Date,
              updatedAt: Date,
              updatedBy: Int) {

  def this(
      id: Int,
) = {

    this(
      id,
,
      DateUtil.currentTime,
      DateUtil.currentTime,
      DBHelper.NoId)
  }

  def this(
) = {

    this(
      DBHelper.NoId,
)

  }

}

object Rmgeneratetaxfile {

  lazy val emptyRmgeneratetaxfile = Rmgeneratetaxfile(
)

  def apply(
      id: Int,
) = {

    new Rmgeneratetaxfile(
      id,
)
  }

  def apply(
) = {

    new Rmgeneratetaxfile(
)
  }

  private val rmgeneratetaxfileParser: RowParser[Rmgeneratetaxfile] = {
      SqlParser.get[Int](C.ID) ~
      SqlParser.get[Date](DBHelper.CREATED_AT) ~
      SqlParser.get[Date](DBHelper.UPDATED_AT) ~
      SqlParser.get[Int](DBHelper.UPDATED_BY) map {
      case
              id ~
 ~
              createdAt ~
              updatedAt ~
              updatedBy =>
        Rmgeneratetaxfile(
              id,
,
              createdAt,
              updatedAt,
              updatedBy)
    }
  }

  def create(user: CompanyUser, rmgeneratetaxfile: Rmgeneratetaxfile): Rmgeneratetaxfile = {
    save(user, rmgeneratetaxfile, true)
  }

  def update(user: CompanyUser, rmgeneratetaxfile: Rmgeneratetaxfile): Rmgeneratetaxfile = {
    save(user, rmgeneratetaxfile, false)
  }

  private def save(user: CompanyUser, rmgeneratetaxfile: Rmgeneratetaxfile, isNew: Boolean): Rmgeneratetaxfile = {
    def getFields = {
      List(

      )
    }
    def throwException = {
      throw new RuntimeException(s"Error when saving ${C.RMGENERATETAXFILE}")
    }

    DBHelper.saveEx(
      user,
      Register(
        C.RMGENERATETAXFILE,
        C.ID,
        rmgeneratetaxfile.id,
        false,
        true,
        true,
        getFields),
      isNew,
      C.CODE
    ) match {
      case SaveResult(true, id) => load(user, id).getOrElse(throwException)
      case SaveResult(false, id) => throwException
    }
  }

  def load(user: CompanyUser, id: Int): Option[Rmgeneratetaxfile] = {
    loadWhere(user, s"${C.ID} = {id}", 'id -> id)
  }

  def loadWhere(user: CompanyUser, where: String, args : scala.Tuple2[scala.Any, anorm.ParameterValue[_]]*) = {
    DB.withConnection(user.database.database) { implicit connection =>
      SQL(s"SELECT t1.*, t2.${C.FK_NAME} FROM ${C.RMGENERATETAXFILE} t1 INNER JOIN ${C.???} t2 ON t1.${C.FK_ID} = t2.${C.FK_ID} WHERE $where")
        .on(args: _*)
        .as(rmgeneratetaxfileParser.singleOpt)
    }
  }

  def delete(user: CompanyUser, id: Int) = {
    DB.withConnection(user.database.database) { implicit connection =>
      try {
        SQL(s"DELETE FROM ${C.RMGENERATETAXFILE} WHERE ${C.ID} = {id}")
        .on('id -> id)
        .executeUpdate
      } catch {
        case NonFatal(e) => {
          Logger.error(s"can't delete a ${C.RMGENERATETAXFILE}. ${C.ID} id: $id. Error ${e.toString}")
          throw e
        }
      }
    }
  }

  def get(user: CompanyUser, id: Int): Rmgeneratetaxfile = {
    load(user, id) match {
      case Some(p) => p
      case None => emptyRmgeneratetaxfile
    }
  }
}


// Router

GET     /api/v1/general/rmgeneratetaxfile/:id              controllers.logged.modules.general.Rmgeneratetaxfiles.get(id: Int)
POST    /api/v1/general/rmgeneratetaxfile                  controllers.logged.modules.general.Rmgeneratetaxfiles.create
PUT     /api/v1/general/rmgeneratetaxfile/:id              controllers.logged.modules.general.Rmgeneratetaxfiles.update(id: Int)
DELETE  /api/v1/general/rmgeneratetaxfile/:id              controllers.logged.modules.general.Rmgeneratetaxfiles.delete(id: Int)




/**/
